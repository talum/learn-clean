#!/usr/bin/ruby

require 'rubygems'
require 'bundler/setup'
Bundler.require

config_path = "#{Dir.home}/.learn-clean"

if File.exist?(config_path)
  token = File.read(config_path)
else
  puts "Please enter your github token"
  token = gets.strip
  File.open(config_path, "w+") do |file|
    file.write token
  end
end

puts "initializing GitHub client"
client = Octokit::Client.new(access_token: token)
client.auto_paginate = true
user = client.user

puts "Would you like to"
puts "1) purge SSH keys"
puts "2) GitHub repos"
puts "3) Delete repo by name?"

choice = gets.strip
case choice.to_i
when 1
  puts "Purging ssh keys from the Learn IDE"
    keys = client.keys
    keys_to_delete = keys.select{|k| k.title == "Learn IDE"}.map{|k| k.id}
    puts "Found #{keys_to_delete.count} keys with the labeled Learn IDE"
    keys_to_delete.each do |key_id|
      puts "Deleting Key: ID #{key_id}"
      client.remove_key(key_id)
    end
  puts "Done"
when 2
  puts "Cool, which batch iteration?"
  batch_iteration = gets.strip
  puts "Attempting to purge forked repos for #{batch_iteration}"
  repos = client.repositories(user=user.login, since: "2018-01-01")
  repos_to_delete = repos.select{|repo| repo.full_name.end_with?(batch_iteration) && repo.fork}.map{|repo| repo.full_name}
  puts "Please confirm you want to delete the following repos: Y/n"
  puts "#{repos_to_delete.join(", ")}"
  confirm = gets.strip.downcase
  if confirm == "y"
    repos_to_delete.each do |repo_name|
      client.delete_repository(repo_name)
    end
  else
    puts "Cool, not deleting anything."
  end

  puts "Done"
when 3
  done = false

  until done
    puts "Enter the repo name"
    repo_name = gets.strip
    begin
      if client.delete_repository("#{user.login}/#{repo_name}")
        puts "Deleted #{repo_name}"
      else
        puts "Unable to delete #{repo_name}"
      end
    rescue Octokit::InvalidRepository => e
      puts e.message
    end

    puts "Do you have another repo to delete? (Y/n)"
    resp = gets.strip.downcase
    if resp == "n"
      done = true
    end
  end
else
  puts "Invalid response. Try running the script again"
end



